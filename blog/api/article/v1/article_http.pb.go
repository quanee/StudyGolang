// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.3

package article

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type ArticleServiceHTTPServer interface {
	CreateArticles(context.Context, *CreateArticlesRequest) (*CreateArticlesReply, error)
	DeleteArticles(context.Context, *DeleteArticlesRequest) (*DeleteArticlesReply, error)
	GetArticles(context.Context, *GetArticlesRequest) (*GetArticlesReply, error)
	UpdateArticles(context.Context, *UpdateArticlesRequest) (*UpdateArticlesReply, error)
}

func RegisterArticleServiceHTTPServer(s *http.Server, srv ArticleServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/article/", _ArticleService_CreateArticles0_HTTP_Handler(srv))
	r.PUT("/v1/article/{id}", _ArticleService_UpdateArticles0_HTTP_Handler(srv))
	r.DELETE("/v1/article/{id}", _ArticleService_DeleteArticles0_HTTP_Handler(srv))
	r.GET("/v1/article/{id}", _ArticleService_GetArticles0_HTTP_Handler(srv))
}

func _ArticleService_CreateArticles0_HTTP_Handler(srv ArticleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateArticlesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/article.ArticleService/CreateArticles")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateArticles(ctx, req.(*CreateArticlesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateArticlesReply)
		return ctx.Result(200, reply)
	}
}

func _ArticleService_UpdateArticles0_HTTP_Handler(srv ArticleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateArticlesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/article.ArticleService/UpdateArticles")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateArticles(ctx, req.(*UpdateArticlesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateArticlesReply)
		return ctx.Result(200, reply)
	}
}

func _ArticleService_DeleteArticles0_HTTP_Handler(srv ArticleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteArticlesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/article.ArticleService/DeleteArticles")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteArticles(ctx, req.(*DeleteArticlesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteArticlesReply)
		return ctx.Result(200, reply)
	}
}

func _ArticleService_GetArticles0_HTTP_Handler(srv ArticleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetArticlesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/article.ArticleService/GetArticles")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArticles(ctx, req.(*GetArticlesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticlesReply)
		return ctx.Result(200, reply)
	}
}

type ArticleServiceHTTPClient interface {
	CreateArticles(ctx context.Context, req *CreateArticlesRequest, opts ...http.CallOption) (rsp *CreateArticlesReply, err error)
	DeleteArticles(ctx context.Context, req *DeleteArticlesRequest, opts ...http.CallOption) (rsp *DeleteArticlesReply, err error)
	GetArticles(ctx context.Context, req *GetArticlesRequest, opts ...http.CallOption) (rsp *GetArticlesReply, err error)
	UpdateArticles(ctx context.Context, req *UpdateArticlesRequest, opts ...http.CallOption) (rsp *UpdateArticlesReply, err error)
}

type ArticleServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewArticleServiceHTTPClient(client *http.Client) ArticleServiceHTTPClient {
	return &ArticleServiceHTTPClientImpl{client}
}

func (c *ArticleServiceHTTPClientImpl) CreateArticles(ctx context.Context, in *CreateArticlesRequest, opts ...http.CallOption) (*CreateArticlesReply, error) {
	var out CreateArticlesReply
	pattern := "/v1/article/"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/article.ArticleService/CreateArticles"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ArticleServiceHTTPClientImpl) DeleteArticles(ctx context.Context, in *DeleteArticlesRequest, opts ...http.CallOption) (*DeleteArticlesReply, error) {
	var out DeleteArticlesReply
	pattern := "/v1/article/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/article.ArticleService/DeleteArticles"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ArticleServiceHTTPClientImpl) GetArticles(ctx context.Context, in *GetArticlesRequest, opts ...http.CallOption) (*GetArticlesReply, error) {
	var out GetArticlesReply
	pattern := "/v1/article/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/article.ArticleService/GetArticles"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ArticleServiceHTTPClientImpl) UpdateArticles(ctx context.Context, in *UpdateArticlesRequest, opts ...http.CallOption) (*UpdateArticlesReply, error) {
	var out UpdateArticlesReply
	pattern := "/v1/article/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/article.ArticleService/UpdateArticles"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
