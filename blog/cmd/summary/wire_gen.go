// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"blog/internal/biz"
	"blog/internal/cache/redis"
	"blog/internal/conf"
	"blog/internal/data"
	"blog/internal/mq/kafka"
	"blog/internal/server/summary"
	"blog/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"go.opentelemetry.io/otel/trace"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(server *conf.Server, confData *conf.Data, cache *conf.Cache, messageQueue *conf.MessageQueue, confService *conf.Service, traceTracerProvider trace.TracerProvider, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	summaryRepo := data.NewSummaryRepo(dataData, logger)
	summaryUsecase := biz.NewSummaryUsecase(summaryRepo, logger)
	radixRC3, err := redis.NewRedisClient(cache)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	kafkaClient := kafka.NewKafkaClient(messageQueue)
	summaryService := service.NewSummaryServiceService(summaryUsecase, radixRC3, kafkaClient, logger)
	httpServer := summary.NewHTTPServer(server, traceTracerProvider, summaryService)
	grpcServer := summary.NewGRPCServer(server, traceTracerProvider, summaryService)
	app := newApp(logger, httpServer, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}
