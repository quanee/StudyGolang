// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.3

package summary

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type SummaryServiceHTTPServer interface {
	CreateSummary(context.Context, *CreateSummaryRequest) (*CreateSummaryReply, error)
	DeleteSummary(context.Context, *DeleteSummaryRequest) (*DeleteSummaryReply, error)
	GetSummary(context.Context, *GetSummaryRequest) (*GetSummaryReply, error)
	ListSummary(context.Context, *ListSummaryRequest) (*ListSummaryReply, error)
	UpdateSummary(context.Context, *UpdateSummaryRequest) (*UpdateSummaryReply, error)
}

func RegisterSummaryServiceHTTPServer(s *http.Server, srv SummaryServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/summary/", _SummaryService_CreateSummary0_HTTP_Handler(srv))
	r.PUT("/v1/summary/{id}", _SummaryService_UpdateSummary0_HTTP_Handler(srv))
	r.DELETE("/v1/summary/{id}", _SummaryService_DeleteSummary0_HTTP_Handler(srv))
	r.GET("/v1/summary/{id}", _SummaryService_GetSummary0_HTTP_Handler(srv))
	r.GET("/v1/list_summary?s={start_id}&l={limit}", _SummaryService_ListSummary0_HTTP_Handler(srv))
}

func _SummaryService_CreateSummary0_HTTP_Handler(srv SummaryServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSummaryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/summary.SummaryService/CreateSummary")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSummary(ctx, req.(*CreateSummaryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateSummaryReply)
		return ctx.Result(200, reply)
	}
}

func _SummaryService_UpdateSummary0_HTTP_Handler(srv SummaryServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSummaryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/summary.SummaryService/UpdateSummary")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSummary(ctx, req.(*UpdateSummaryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateSummaryReply)
		return ctx.Result(200, reply)
	}
}

func _SummaryService_DeleteSummary0_HTTP_Handler(srv SummaryServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteSummaryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/summary.SummaryService/DeleteSummary")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSummary(ctx, req.(*DeleteSummaryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteSummaryReply)
		return ctx.Result(200, reply)
	}
}

func _SummaryService_GetSummary0_HTTP_Handler(srv SummaryServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSummaryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/summary.SummaryService/GetSummary")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSummary(ctx, req.(*GetSummaryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSummaryReply)
		return ctx.Result(200, reply)
	}
}

func _SummaryService_ListSummary0_HTTP_Handler(srv SummaryServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListSummaryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/summary.SummaryService/ListSummary")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListSummary(ctx, req.(*ListSummaryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListSummaryReply)
		return ctx.Result(200, reply)
	}
}

type SummaryServiceHTTPClient interface {
	CreateSummary(ctx context.Context, req *CreateSummaryRequest, opts ...http.CallOption) (rsp *CreateSummaryReply, err error)
	DeleteSummary(ctx context.Context, req *DeleteSummaryRequest, opts ...http.CallOption) (rsp *DeleteSummaryReply, err error)
	GetSummary(ctx context.Context, req *GetSummaryRequest, opts ...http.CallOption) (rsp *GetSummaryReply, err error)
	ListSummary(ctx context.Context, req *ListSummaryRequest, opts ...http.CallOption) (rsp *ListSummaryReply, err error)
	UpdateSummary(ctx context.Context, req *UpdateSummaryRequest, opts ...http.CallOption) (rsp *UpdateSummaryReply, err error)
}

type SummaryServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewSummaryServiceHTTPClient(client *http.Client) SummaryServiceHTTPClient {
	return &SummaryServiceHTTPClientImpl{client}
}

func (c *SummaryServiceHTTPClientImpl) CreateSummary(ctx context.Context, in *CreateSummaryRequest, opts ...http.CallOption) (*CreateSummaryReply, error) {
	var out CreateSummaryReply
	pattern := "/v1/summary/"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/summary.SummaryService/CreateSummary"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SummaryServiceHTTPClientImpl) DeleteSummary(ctx context.Context, in *DeleteSummaryRequest, opts ...http.CallOption) (*DeleteSummaryReply, error) {
	var out DeleteSummaryReply
	pattern := "/v1/summary/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/summary.SummaryService/DeleteSummary"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SummaryServiceHTTPClientImpl) GetSummary(ctx context.Context, in *GetSummaryRequest, opts ...http.CallOption) (*GetSummaryReply, error) {
	var out GetSummaryReply
	pattern := "/v1/summary/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/summary.SummaryService/GetSummary"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SummaryServiceHTTPClientImpl) ListSummary(ctx context.Context, in *ListSummaryRequest, opts ...http.CallOption) (*ListSummaryReply, error) {
	var out ListSummaryReply
	pattern := "/v1/list_summary?s={start_id}&l={limit}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/summary.SummaryService/ListSummary"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SummaryServiceHTTPClientImpl) UpdateSummary(ctx context.Context, in *UpdateSummaryRequest, opts ...http.CallOption) (*UpdateSummaryReply, error) {
	var out UpdateSummaryReply
	pattern := "/v1/summary/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/summary.SummaryService/UpdateSummary"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
