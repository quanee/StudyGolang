// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package summary

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SummaryServiceClient is the client API for SummaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SummaryServiceClient interface {
	CreateSummary(ctx context.Context, in *CreateSummaryRequest, opts ...grpc.CallOption) (*CreateSummaryReply, error)
	UpdateSummary(ctx context.Context, in *UpdateSummaryRequest, opts ...grpc.CallOption) (*UpdateSummaryReply, error)
	DeleteSummary(ctx context.Context, in *DeleteSummaryRequest, opts ...grpc.CallOption) (*DeleteSummaryReply, error)
	GetSummary(ctx context.Context, in *GetSummaryRequest, opts ...grpc.CallOption) (*GetSummaryReply, error)
	ListSummary(ctx context.Context, in *ListSummaryRequest, opts ...grpc.CallOption) (*ListSummaryReply, error)
}

type summaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSummaryServiceClient(cc grpc.ClientConnInterface) SummaryServiceClient {
	return &summaryServiceClient{cc}
}

func (c *summaryServiceClient) CreateSummary(ctx context.Context, in *CreateSummaryRequest, opts ...grpc.CallOption) (*CreateSummaryReply, error) {
	out := new(CreateSummaryReply)
	err := c.cc.Invoke(ctx, "/summary.SummaryService/CreateSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryServiceClient) UpdateSummary(ctx context.Context, in *UpdateSummaryRequest, opts ...grpc.CallOption) (*UpdateSummaryReply, error) {
	out := new(UpdateSummaryReply)
	err := c.cc.Invoke(ctx, "/summary.SummaryService/UpdateSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryServiceClient) DeleteSummary(ctx context.Context, in *DeleteSummaryRequest, opts ...grpc.CallOption) (*DeleteSummaryReply, error) {
	out := new(DeleteSummaryReply)
	err := c.cc.Invoke(ctx, "/summary.SummaryService/DeleteSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryServiceClient) GetSummary(ctx context.Context, in *GetSummaryRequest, opts ...grpc.CallOption) (*GetSummaryReply, error) {
	out := new(GetSummaryReply)
	err := c.cc.Invoke(ctx, "/summary.SummaryService/GetSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryServiceClient) ListSummary(ctx context.Context, in *ListSummaryRequest, opts ...grpc.CallOption) (*ListSummaryReply, error) {
	out := new(ListSummaryReply)
	err := c.cc.Invoke(ctx, "/summary.SummaryService/ListSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SummaryServiceServer is the server API for SummaryService service.
// All implementations must embed UnimplementedSummaryServiceServer
// for forward compatibility
type SummaryServiceServer interface {
	CreateSummary(context.Context, *CreateSummaryRequest) (*CreateSummaryReply, error)
	UpdateSummary(context.Context, *UpdateSummaryRequest) (*UpdateSummaryReply, error)
	DeleteSummary(context.Context, *DeleteSummaryRequest) (*DeleteSummaryReply, error)
	GetSummary(context.Context, *GetSummaryRequest) (*GetSummaryReply, error)
	ListSummary(context.Context, *ListSummaryRequest) (*ListSummaryReply, error)
	mustEmbedUnimplementedSummaryServiceServer()
}

// UnimplementedSummaryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSummaryServiceServer struct {
}

func (UnimplementedSummaryServiceServer) CreateSummary(context.Context, *CreateSummaryRequest) (*CreateSummaryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSummary not implemented")
}
func (UnimplementedSummaryServiceServer) UpdateSummary(context.Context, *UpdateSummaryRequest) (*UpdateSummaryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSummary not implemented")
}
func (UnimplementedSummaryServiceServer) DeleteSummary(context.Context, *DeleteSummaryRequest) (*DeleteSummaryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSummary not implemented")
}
func (UnimplementedSummaryServiceServer) GetSummary(context.Context, *GetSummaryRequest) (*GetSummaryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummary not implemented")
}
func (UnimplementedSummaryServiceServer) ListSummary(context.Context, *ListSummaryRequest) (*ListSummaryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSummary not implemented")
}
func (UnimplementedSummaryServiceServer) mustEmbedUnimplementedSummaryServiceServer() {}

// UnsafeSummaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SummaryServiceServer will
// result in compilation errors.
type UnsafeSummaryServiceServer interface {
	mustEmbedUnimplementedSummaryServiceServer()
}

func RegisterSummaryServiceServer(s grpc.ServiceRegistrar, srv SummaryServiceServer) {
	s.RegisterService(&SummaryService_ServiceDesc, srv)
}

func _SummaryService_CreateSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).CreateSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/summary.SummaryService/CreateSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).CreateSummary(ctx, req.(*CreateSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummaryService_UpdateSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).UpdateSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/summary.SummaryService/UpdateSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).UpdateSummary(ctx, req.(*UpdateSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummaryService_DeleteSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).DeleteSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/summary.SummaryService/DeleteSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).DeleteSummary(ctx, req.(*DeleteSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummaryService_GetSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).GetSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/summary.SummaryService/GetSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).GetSummary(ctx, req.(*GetSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummaryService_ListSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).ListSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/summary.SummaryService/ListSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).ListSummary(ctx, req.(*ListSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SummaryService_ServiceDesc is the grpc.ServiceDesc for SummaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SummaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "summary.SummaryService",
	HandlerType: (*SummaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSummary",
			Handler:    _SummaryService_CreateSummary_Handler,
		},
		{
			MethodName: "UpdateSummary",
			Handler:    _SummaryService_UpdateSummary_Handler,
		},
		{
			MethodName: "DeleteSummary",
			Handler:    _SummaryService_DeleteSummary_Handler,
		},
		{
			MethodName: "GetSummary",
			Handler:    _SummaryService_GetSummary_Handler,
		},
		{
			MethodName: "ListSummary",
			Handler:    _SummaryService_ListSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "summary.proto",
}
