// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"blog/internal/data/ent/migrate"

	"blog/internal/data/ent/article"
	"blog/internal/data/ent/blog"
	"blog/internal/data/ent/summary"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Article is the client for interacting with the Article builders.
	Article *ArticleClient
	// Blog is the client for interacting with the Blog builders.
	Blog *BlogClient
	// Summary is the client for interacting with the Summary builders.
	Summary *SummaryClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Article = NewArticleClient(c.config)
	c.Blog = NewBlogClient(c.config)
	c.Summary = NewSummaryClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:     ctx,
		config:  cfg,
		Article: NewArticleClient(cfg),
		Blog:    NewBlogClient(cfg),
		Summary: NewSummaryClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:  cfg,
		Article: NewArticleClient(cfg),
		Blog:    NewBlogClient(cfg),
		Summary: NewSummaryClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Article.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Article.Use(hooks...)
	c.Blog.Use(hooks...)
	c.Summary.Use(hooks...)
}

// ArticleClient is a client for the Article schema.
type ArticleClient struct {
	config
}

// NewArticleClient returns a client for the Article from the given config.
func NewArticleClient(c config) *ArticleClient {
	return &ArticleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `article.Hooks(f(g(h())))`.
func (c *ArticleClient) Use(hooks ...Hook) {
	c.hooks.Article = append(c.hooks.Article, hooks...)
}

// Create returns a create builder for Article.
func (c *ArticleClient) Create() *ArticleCreate {
	mutation := newArticleMutation(c.config, OpCreate)
	return &ArticleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Article entities.
func (c *ArticleClient) CreateBulk(builders ...*ArticleCreate) *ArticleCreateBulk {
	return &ArticleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Article.
func (c *ArticleClient) Update() *ArticleUpdate {
	mutation := newArticleMutation(c.config, OpUpdate)
	return &ArticleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ArticleClient) UpdateOne(a *Article) *ArticleUpdateOne {
	mutation := newArticleMutation(c.config, OpUpdateOne, withArticle(a))
	return &ArticleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ArticleClient) UpdateOneID(id int) *ArticleUpdateOne {
	mutation := newArticleMutation(c.config, OpUpdateOne, withArticleID(id))
	return &ArticleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Article.
func (c *ArticleClient) Delete() *ArticleDelete {
	mutation := newArticleMutation(c.config, OpDelete)
	return &ArticleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ArticleClient) DeleteOne(a *Article) *ArticleDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ArticleClient) DeleteOneID(id int) *ArticleDeleteOne {
	builder := c.Delete().Where(article.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ArticleDeleteOne{builder}
}

// Query returns a query builder for Article.
func (c *ArticleClient) Query() *ArticleQuery {
	return &ArticleQuery{
		config: c.config,
	}
}

// Get returns a Article entity by its id.
func (c *ArticleClient) Get(ctx context.Context, id int) (*Article, error) {
	return c.Query().Where(article.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ArticleClient) GetX(ctx context.Context, id int) *Article {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ArticleClient) Hooks() []Hook {
	return c.hooks.Article
}

// BlogClient is a client for the Blog schema.
type BlogClient struct {
	config
}

// NewBlogClient returns a client for the Blog from the given config.
func NewBlogClient(c config) *BlogClient {
	return &BlogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `blog.Hooks(f(g(h())))`.
func (c *BlogClient) Use(hooks ...Hook) {
	c.hooks.Blog = append(c.hooks.Blog, hooks...)
}

// Create returns a create builder for Blog.
func (c *BlogClient) Create() *BlogCreate {
	mutation := newBlogMutation(c.config, OpCreate)
	return &BlogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Blog entities.
func (c *BlogClient) CreateBulk(builders ...*BlogCreate) *BlogCreateBulk {
	return &BlogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Blog.
func (c *BlogClient) Update() *BlogUpdate {
	mutation := newBlogMutation(c.config, OpUpdate)
	return &BlogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlogClient) UpdateOne(b *Blog) *BlogUpdateOne {
	mutation := newBlogMutation(c.config, OpUpdateOne, withBlog(b))
	return &BlogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BlogClient) UpdateOneID(id int) *BlogUpdateOne {
	mutation := newBlogMutation(c.config, OpUpdateOne, withBlogID(id))
	return &BlogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Blog.
func (c *BlogClient) Delete() *BlogDelete {
	mutation := newBlogMutation(c.config, OpDelete)
	return &BlogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BlogClient) DeleteOne(b *Blog) *BlogDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BlogClient) DeleteOneID(id int) *BlogDeleteOne {
	builder := c.Delete().Where(blog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BlogDeleteOne{builder}
}

// Query returns a query builder for Blog.
func (c *BlogClient) Query() *BlogQuery {
	return &BlogQuery{
		config: c.config,
	}
}

// Get returns a Blog entity by its id.
func (c *BlogClient) Get(ctx context.Context, id int) (*Blog, error) {
	return c.Query().Where(blog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BlogClient) GetX(ctx context.Context, id int) *Blog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BlogClient) Hooks() []Hook {
	return c.hooks.Blog
}

// SummaryClient is a client for the Summary schema.
type SummaryClient struct {
	config
}

// NewSummaryClient returns a client for the Summary from the given config.
func NewSummaryClient(c config) *SummaryClient {
	return &SummaryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `summary.Hooks(f(g(h())))`.
func (c *SummaryClient) Use(hooks ...Hook) {
	c.hooks.Summary = append(c.hooks.Summary, hooks...)
}

// Create returns a create builder for Summary.
func (c *SummaryClient) Create() *SummaryCreate {
	mutation := newSummaryMutation(c.config, OpCreate)
	return &SummaryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Summary entities.
func (c *SummaryClient) CreateBulk(builders ...*SummaryCreate) *SummaryCreateBulk {
	return &SummaryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Summary.
func (c *SummaryClient) Update() *SummaryUpdate {
	mutation := newSummaryMutation(c.config, OpUpdate)
	return &SummaryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SummaryClient) UpdateOne(s *Summary) *SummaryUpdateOne {
	mutation := newSummaryMutation(c.config, OpUpdateOne, withSummary(s))
	return &SummaryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SummaryClient) UpdateOneID(id int) *SummaryUpdateOne {
	mutation := newSummaryMutation(c.config, OpUpdateOne, withSummaryID(id))
	return &SummaryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Summary.
func (c *SummaryClient) Delete() *SummaryDelete {
	mutation := newSummaryMutation(c.config, OpDelete)
	return &SummaryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SummaryClient) DeleteOne(s *Summary) *SummaryDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SummaryClient) DeleteOneID(id int) *SummaryDeleteOne {
	builder := c.Delete().Where(summary.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SummaryDeleteOne{builder}
}

// Query returns a query builder for Summary.
func (c *SummaryClient) Query() *SummaryQuery {
	return &SummaryQuery{
		config: c.config,
	}
}

// Get returns a Summary entity by its id.
func (c *SummaryClient) Get(ctx context.Context, id int) (*Summary, error) {
	return c.Query().Where(summary.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SummaryClient) GetX(ctx context.Context, id int) *Summary {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SummaryClient) Hooks() []Hook {
	return c.hooks.Summary
}
